import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Layout from '../../components/Layout/Layout';
import Alert from '../../components/Alert/Alert';
import styles from './Situation.module.scss';

function Situation() {
    const navigate = useNavigate();
    const [selectedGameType, setSelectedGameType] = useState(null);
    const [selectedUserRole, setSelectedUserRole] = useState(null);
    const [selectedAIRole, setSelectedAIRole] = useState(null);
    const [selectedAIVoice, setSelectedAIVoice] = useState(null);
    const [rightPanelState, setRightPanelState] = useState(false);
    const [showAlert, setShowAlert] = useState(false);

    const roleOptions = {
        'ÌïôÍµê ÎÜÄÏù¥': ['ÏÑ†ÏÉùÎãò', 'ÌïôÏÉù', 'ÍµêÏû•ÏÑ†ÏÉùÎãò'],
        'Î≥ëÏõê ÎÜÄÏù¥': ['ÏùòÏÇ¨', 'ÌôòÏûê', 'Í∞ÑÌò∏ÏÇ¨'],
        'ÏãúÏû• ÎÜÄÏù¥': ['ÏÉÅÏù∏', 'ÏÜåÎπÑÏûê', 'Í≤ΩÏ∞∞'],
        'Í∞ÄÏ°± ÎÜÄÏù¥': ['ÏïÑÎπ†', 'ÏóÑÎßà', 'ÏïÑÎì§', 'Îî∏'],
        'ÏÜåÍøâ ÎÜÄÏù¥': ['ÎÑàÍµ¨Î¶¨', 'ÏÇ¨Ïûê', 'ÌÜ†ÎÅº'],
        'ÏÜåÎ∞©Í¥Ä ÎÜÄÏù¥': ['ÏÜåÎ∞©Í¥Ä', 'ÎèÑÏõÄÏù¥ ÌïÑÏöîÌïú ÏÇ¨Îûå'],
        'Ïó∞ÏòàÏù∏ ÎÜÄÏù¥': ['Í∞ÄÏàò', 'Î∞∞Ïö∞', 'Î©îÏù¥ÌÅ¨ÏóÖ Îã¥Îãπ ÏÑ†ÏÉùÎãò', 'Ìó§Ïñ¥ Îã¥Îãπ ÏÑ†ÏÉùÎãò', 'Îß§ÎãàÏ†Ä'],
        'ÏäπÎ¨¥Ïõê ÎÜÄÏù¥': ['ÏäπÍ∞ù', 'ÏäπÎ¨¥Ïõê'],
    };

    const voiceOptions = ['Ïó¨Ïûê Ïñ¥Î¶∞Ïù¥ ÏïÑÍ≥†ÎØ∏', 'ÎÇ®Ïûê Ïñ¥Î¶∞Ïù¥ ÏïÑÍ≥†ÎØ∏', 'Ïó¨Ïûê ÏïÑÍ≥†ÎØ∏', 'ÎÇ®Ïûê ÏïÑÍ≥†ÎØ∏'];

    const handleRolePlaySelect = (gameType) => {
        if (gameType === selectedGameType) {
            setSelectedGameType(null);
            setRightPanelState(false);
        } else {
            setSelectedGameType(gameType);
            setRightPanelState(true);
        }
    };

    const handleRoleSelection = (role, type) => {
        if (type === 'user') {
            setSelectedUserRole(role);
        } else if (type === 'ai') {
            setSelectedAIRole(role);
        }
    };

    const handleNextStep = async () => {
        if (selectedGameType && selectedUserRole && selectedAIRole && selectedAIVoice) {
            const voiceIndex = voiceOptions.indexOf(selectedAIVoice) + 1; // Ïù∏Îç±Ïä§Îäî 1Î∂ÄÌÑ∞ ÏãúÏûë
            const dataToSend = {
                voice_id: voiceIndex,
                situation: selectedGameType,
                my_role: selectedUserRole,
                ai_role: selectedAIRole,
                user_id: 1,
            };

            try {
                const response = await fetch('http://localhost:8000/server/roleplay', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(dataToSend),
                });

                if (!response.ok) {
                    throw new Error('ÏÑúÎ≤ÑÎ°ú Îç∞Ïù¥ÌÑ∞Î•º Ï†ÑÏÜ°ÌïòÎäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                }

                const responseData = await response.json();

                // ÏùëÎãµÏóêÏÑú history_idÎ•º Î∞õÏïÑÏôÄ URLÏóê Ï∂îÍ∞Ä
                const queryParams = new URLSearchParams({
                    ...dataToSend,
                    history_id: responseData.history_id
                }).toString();

                navigate(`/chat?${queryParams}`);
            } catch (error) {
                console.error('Error sending data:', error);
                // ÌïÑÏöîÏóê Îî∞Îùº ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÌëúÏãúÌï† Ïàò ÏûàÏäµÎãàÎã§.
            }
        } else {
            setShowAlert(true);
        }
    };

    const handleExit = () => {
        navigate('/');
    };

    const handleCloseAlert = () => {
        setShowAlert(false);
    };

    return (
        <Layout>
            <div className={styles.situationWrap}>
                <div className={styles.header}>
                    <h1 className={styles.title}> AIÏôÄ Ìï®ÍªòÌïòÎäî Ïó≠Ìï†ÎÜÄÏù¥ üêª</h1>
                    <button onClick={handleExit} className={styles.exitButton}>ÎèåÏïÑÍ∞ÄÍ∏∞</button>
                </div>
                <div className={styles.content}>
                    <div className={styles.leftPanel}>
                        <h2 className={styles.subtitle}>ÎÜÄÏù¥Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</h2>
                        <div className={styles.gameTypeBox}>
                            {Object.keys(roleOptions).map((gameType) => (
                                <button
                                    key={gameType}
                                    onClick={() => handleRolePlaySelect(gameType)}
                                    className={`${styles.gameTypeButton} ${gameType === selectedGameType ? styles.selected : ''}`}
                                >
                                    {gameType}
                                </button>
                            ))}
                        </div>
                    </div>
                    {rightPanelState && selectedGameType && (
                        <div className={styles.rightPanel}>
                            <div className={styles.selectionSection}>
                                <h3>
                                    ÏÇ¨Ïö©Ïûê Ïó≠Ìï†
                                </h3>
                                <div className={styles.roleButtonGroup}>
                                    {roleOptions[selectedGameType].map((role) => (
                                        <button
                                            key={role}
                                            onClick={() => handleRoleSelection(role, 'user')}
                                            className={`${styles.roleButton} ${role === selectedUserRole ? styles.selected : ''}`}
                                        >
                                            {role}
                                        </button>
                                    ))}
                                </div>
                            </div>
                            <div className={styles.selectionSection}>
                                <h3>AI Ïó≠Ìï†</h3>
                                <div className={styles.roleButtonGroup}>
                                    {roleOptions[selectedGameType].map((role) => (
                                        <button
                                            key={role}
                                            onClick={() => handleRoleSelection(role, 'ai')}
                                            className={`${styles.roleButton} ${role === selectedAIRole ? styles.selected : ''}`}
                                        >
                                            {role}
                                        </button>
                                    ))}
                                </div>
                            </div>
                            <div className={styles.selectionSection}>
                                <h3>AI ÏùåÏÑ±</h3>
                                <div className={styles.voiceButtonGroup}>
                                    {voiceOptions.map((voice) => (
                                        <button
                                            key={voice}
                                            onClick={() => setSelectedAIVoice(voice)}
                                            className={`${styles.voiceButton} ${voice === selectedAIVoice ? styles.selected : ''}`}
                                        >
                                            {voice}
                                        </button>
                                    ))}
                                </div>
                            </div>
                            <div className={styles.nextButtonContainer}>
                                <button onClick={handleNextStep} className={styles.nextButton}>Îã§Ïùå Îã®Í≥Ñ ‚û™</button>
                            </div>
                        </div>
                    )}
                </div>
                {showAlert && (
                    <Alert
                        message="Î™®Îì† Ìï≠Î™©ÏùÑ ÏÑ†ÌÉùÌï¥Ïïº Ìï©ÎãàÎã§."
                        onConfirm={handleCloseAlert}
                    />
                )}
            </div>
        </Layout>
    );
}

export default Situation;